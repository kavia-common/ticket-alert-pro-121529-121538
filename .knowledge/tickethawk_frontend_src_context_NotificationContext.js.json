{"is_source_file": true, "format": "JavaScript", "description": "This file defines a React context for managing user notifications, including mock data setup for demo mode, notification state management functions, and context provider implementation.", "external_files": ["./AuthContext"], "external_methods": ["useAuth"], "published": ["useNotifications", "NotificationProvider"], "classes": [], "methods": [{"name": "useNotifications", "description": "Custom hook to access the NotificationContext, ensuring it is used within a NotificationProvider."}, {"name": "NotificationProvider", "description": "React component that provides notification state and functions to its children, including mock notification setup in demo mode."}, {"name": "addNotification", "description": "Function to add a new notification to the state, optionally triggering a browser notification."}, {"name": "markAsRead", "description": "Marks a specific notification as read based on its ID."}, {"name": "markAllAsRead", "description": "Marks all notifications as read."}, {"name": "deleteNotification", "description": "Deletes a notification by ID and adjusts unread count if necessary."}, {"name": "clearAllNotifications", "description": "Clears all notifications and resets unread count."}, {"name": "requestNotificationPermission", "description": "Requests permission from the browser to display notifications, returning a boolean indicating permission status."}], "calls": ["React.createContext", "useContext", "useState", "useEffect", "setNotifications", "setUnreadCount", "setConnected", "setTimeout", "Notification.permission", "Notification.requestPermission", "Notification"], "search-terms": ["NotificationContext", "mockNotifications", "DEMO_MODE", "useAuth", "NotificationProvider", "useNotifications"], "state": 2, "file_id": 15, "knowledge_revision": 89, "git_revision": "3f006cac4cc13a3888760a0793315573d48aeca3", "revision_history": [{"34": ""}, {"86": "068251a05407f5b9be91b15c6659d6d76d371387"}, {"87": "068251a05407f5b9be91b15c6659d6d76d371387"}, {"88": "068251a05407f5b9be91b15c6659d6d76d371387"}, {"89": "3f006cac4cc13a3888760a0793315573d48aeca3"}], "ctags": [{"_type": "tag", "name": "DEMO_MODE", "path": "/home/kavia/workspace/code-generation/ticket-alert-pro-121529-121538/tickethawk_frontend/src/context/NotificationContext.js", "pattern": "/^const DEMO_MODE = true;$/", "language": "JavaScript", "kind": "constant"}, {"_type": "tag", "name": "NotificationContext", "path": "/home/kavia/workspace/code-generation/ticket-alert-pro-121529-121538/tickethawk_frontend/src/context/NotificationContext.js", "pattern": "/^const NotificationContext = createContext();$/", "language": "JavaScript", "kind": "constant"}, {"_type": "tag", "name": "NotificationProvider", "path": "/home/kavia/workspace/code-generation/ticket-alert-pro-121529-121538/tickethawk_frontend/src/context/NotificationContext.js", "pattern": "/^export const NotificationProvider = ({ children }) => {$/", "language": "JavaScript", "kind": "constant"}, {"_type": "tag", "name": "addNotification", "path": "/home/kavia/workspace/code-generation/ticket-alert-pro-121529-121538/tickethawk_frontend/src/context/NotificationContext.js", "pattern": "/^  const addNotification = (notification) => {$/", "language": "JavaScript", "kind": "constant"}, {"_type": "tag", "name": "children", "path": "/home/kavia/workspace/code-generation/ticket-alert-pro-121529-121538/tickethawk_frontend/src/context/NotificationContext.js", "pattern": "/^export const NotificationProvider = ({ children }) => {$/", "language": "JavaScript", "kind": "field", "scope": "NotificationProvider", "scopeKind": "class"}, {"_type": "tag", "name": "clearAllNotifications", "path": "/home/kavia/workspace/code-generation/ticket-alert-pro-121529-121538/tickethawk_frontend/src/context/NotificationContext.js", "pattern": "/^  const clearAllNotifications = () => {$/", "language": "JavaScript", "kind": "constant"}, {"_type": "tag", "name": "context", "path": "/home/kavia/workspace/code-generation/ticket-alert-pro-121529-121538/tickethawk_frontend/src/context/NotificationContext.js", "pattern": "/^  const context = useContext(NotificationContext);$/", "language": "JavaScript", "kind": "constant"}, {"_type": "tag", "name": "deleteNotification", "path": "/home/kavia/workspace/code-generation/ticket-alert-pro-121529-121538/tickethawk_frontend/src/context/NotificationContext.js", "pattern": "/^  const deleteNotification = (notificationId) => {$/", "language": "JavaScript", "kind": "constant"}, {"_type": "tag", "name": "markAllAsRead", "path": "/home/kavia/workspace/code-generation/ticket-alert-pro-121529-121538/tickethawk_frontend/src/context/NotificationContext.js", "pattern": "/^  const markAllAsRead = () => {$/", "language": "JavaScript", "kind": "constant"}, {"_type": "tag", "name": "markAsRead", "path": "/home/kavia/workspace/code-generation/ticket-alert-pro-121529-121538/tickethawk_frontend/src/context/NotificationContext.js", "pattern": "/^  const markAsRead = (notificationId) => {$/", "language": "JavaScript", "kind": "constant"}, {"_type": "tag", "name": "permission", "path": "/home/kavia/workspace/code-generation/ticket-alert-pro-121529-121538/tickethawk_frontend/src/context/NotificationContext.js", "pattern": "/^      const permission = await Notification.requestPermission();$/", "language": "JavaScript", "kind": "constant"}, {"_type": "tag", "name": "requestNotificationPermission", "path": "/home/kavia/workspace/code-generation/ticket-alert-pro-121529-121538/tickethawk_frontend/src/context/NotificationContext.js", "pattern": "/^  const requestNotificationPermission = async () => {$/", "language": "JavaScript", "kind": "constant"}, {"_type": "tag", "name": "setConnected", "path": "/home/kavia/workspace/code-generation/ticket-alert-pro-121529-121538/tickethawk_frontend/src/context/NotificationContext.js", "pattern": "/^  const [connected, setConnected] = useState(false);$/", "language": "JavaScript", "kind": "constant"}, {"_type": "tag", "name": "setNotifications", "path": "/home/kavia/workspace/code-generation/ticket-alert-pro-121529-121538/tickethawk_frontend/src/context/NotificationContext.js", "pattern": "/^  const [notifications, setNotifications] = useState([]);$/", "language": "JavaScript", "kind": "constant"}, {"_type": "tag", "name": "setUnreadCount", "path": "/home/kavia/workspace/code-generation/ticket-alert-pro-121529-121538/tickethawk_frontend/src/context/NotificationContext.js", "pattern": "/^  const [unreadCount, setUnreadCount] = useState(0);$/", "language": "JavaScript", "kind": "constant"}, {"_type": "tag", "name": "socket", "path": "/home/kavia/workspace/code-generation/ticket-alert-pro-121529-121538/tickethawk_frontend/src/context/NotificationContext.js", "pattern": "/^    socket,$/", "language": "JavaScript", "kind": "field", "scope": "value", "scopeKind": "class"}, {"_type": "tag", "name": "useNotifications", "path": "/home/kavia/workspace/code-generation/ticket-alert-pro-121529-121538/tickethawk_frontend/src/context/NotificationContext.js", "pattern": "/^export const useNotifications = () => {$/", "language": "JavaScript", "kind": "constant"}, {"_type": "tag", "name": "value", "path": "/home/kavia/workspace/code-generation/ticket-alert-pro-121529-121538/tickethawk_frontend/src/context/NotificationContext.js", "pattern": "/^    <NotificationContext.Provider value={value}>$/", "language": "JavaScript", "kind": "field", "scope": "Provider", "scopeKind": "class"}, {"_type": "tag", "name": "value", "path": "/home/kavia/workspace/code-generation/ticket-alert-pro-121529-121538/tickethawk_frontend/src/context/NotificationContext.js", "pattern": "/^  const value = {$/", "language": "JavaScript", "kind": "constant"}], "hash": "f0a4d1562b9c310c1fdca249afa5fade", "format-version": 4, "code-base-name": "tickethawk_frontend", "filename": "tickethawk_frontend/src/context/NotificationContext.js", "fields": [{"name": "export const NotificationProvider = ({ children }) => {", "scope": "NotificationProvider", "scopeKind": "class", "description": "unavailable"}, {"name": "socket,", "scope": "value", "scopeKind": "class", "description": "unavailable"}, {"name": "<NotificationContext.Provider value={value}>", "scope": "Provider", "scopeKind": "class", "description": "unavailable"}]}